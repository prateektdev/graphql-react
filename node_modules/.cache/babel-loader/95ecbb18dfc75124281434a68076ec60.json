{"ast":null,"code":"var _jsxFileName = \"/home/prateek/Documents/techvalens/test-task/src/containers/Topics/Topics.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_TOPICS = gql`\nsearch(query: \"react\", type: REPOSITORY, first: 10) {\n  repositoryCount\n  edges {\n    node {\n      ... on Repository {\n        stargazers {\n          totalCount\n        }\n        resourcePath\n        repositoryTopics(first: 10) {\n          totalCount\n          nodes {\n            topic {\n              name\n              stargazerCount\n              relatedTopics {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Topics = props => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TOPICS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"This is Topic\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Topics, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Topics;\nexport default Topics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Topics\");","map":{"version":3,"sources":["/home/prateek/Documents/techvalens/test-task/src/containers/Topics/Topics.js"],"names":["useQuery","gql","GET_TOPICS","Topics","props","loading","error","data"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,UAAU,GAAGD,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA1BA;;AA4BA,MAAME,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,UAAD,CAAzC;AAEA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACT,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CARD;;GAAMH,M;UAC6BH,Q;;;KAD7BG,M;AASN,eAAeA,MAAf","sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst GET_TOPICS = gql`\nsearch(query: \"react\", type: REPOSITORY, first: 10) {\n  repositoryCount\n  edges {\n    node {\n      ... on Repository {\n        stargazers {\n          totalCount\n        }\n        resourcePath\n        repositoryTopics(first: 10) {\n          totalCount\n          nodes {\n            topic {\n              name\n              stargazerCount\n              relatedTopics {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Topics = (props) => {\n  const { loading, error, data } = useQuery(GET_TOPICS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n    return (\n        <div>This is Topic</div>\n    )\n}\nexport default Topics;"]},"metadata":{},"sourceType":"module"}