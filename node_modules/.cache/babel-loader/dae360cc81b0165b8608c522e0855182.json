{"ast":null,"code":"var _jsxFileName = \"/home/prateek/Documents/techvalens/test-task/src/containers/Topics/Topics.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_TOPICS = gql`\nquery SearchTopics($search: String!) {\n  search(query: $search, type: REPOSITORY, first: 10) {\n    repositoryCount\n    edges {\n      node {\n        ... on Repository {\n          stargazers {\n            totalCount\n          }\n          resourcePath\n          repositoryTopics(first: 10) {\n            totalCount\n            nodes {\n              topic {\n                name\n                stargazerCount\n                relatedTopics {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Topics = props => {\n  _s();\n\n  const [searchValue, setSearchValue] = useState(\"react\"); // const { loading, error, data } = useQuery(GET_TOPICS,\n  //   {\n  //     variables: { searchValue }\n  //   });\n  // if (loading) {\n  //   return (\n  //     <div>\n  //       <i className=\"fa fa-spinner fa-spin mr-4\" />\n  //       <span>...Searching for {searchValue}</span>\n  //     </div>\n  //   );\n  // }\n  // if (error) return `Error! ${error.message}`;\n  //debug the result if needed\n  // console.debug(\"RESULT:\", data);\n\n  const handleSearchChange = key => {\n    //update the search term when user type in the search bar\n    this.setState({\n      searchTerm: key\n    });\n    console.log(\"handleSearchChange:\", key, this.state.searchTerm);\n  };\n\n  const handleChange = e => {\n    this.setState({\n      searchTerm: e.target.value\n    });\n    console.debug(\"handleChange:\", this.state, e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar navbar-dark bg-dark\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-brand \",\n        children: \"Test task GraphQL  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-inline\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: searchValue,\n          onChange: handleChange,\n          className: \"form-control\",\n          type: \"search\",\n          placeholder: \"Search\",\n          \"aria-label\": \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-danger\",\n          type: \"submit\",\n          onClick: () => props.onSearchChange(searchValue),\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Topic : \", /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"text-danger\",\n        children: searchValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Topics, \"1KR8+UQay0KqdTu8FAxlqheSRto=\");\n\n_c = Topics;\nexport default Topics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Topics\");","map":{"version":3,"sources":["/home/prateek/Documents/techvalens/test-task/src/containers/Topics/Topics.js"],"names":["useQuery","gql","useState","GET_TOPICS","Topics","props","searchValue","setSearchValue","handleSearchChange","key","setState","searchTerm","console","log","state","handleChange","e","target","value","debug","onSearchChange"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,UAAU,GAAGF,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA5BA;;AA8BA,MAAMG,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,OAAD,CAA9C,CADwB,CAGxB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMM,kBAAkB,GAAGC,GAAG,IAAI;AAChC;AACA,SAAKC,QAAL,CAAc;AAAEC,MAAAA,UAAU,EAAEF;AAAd,KAAd;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCJ,GAAnC,EAAwC,KAAKK,KAAL,CAAWH,UAAnD;AACD,GAJD;;AAMA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AAC1B,SAAKN,QAAL,CAAc;AAAEC,MAAAA,UAAU,EAAEK,CAAC,CAACC,MAAF,CAASC;AAAvB,KAAd;AACAN,IAAAA,OAAO,CAACO,KAAR,CAAc,eAAd,EAA+B,KAAKL,KAApC,EAA2CE,CAAC,CAACC,MAAF,CAASC,KAApD;AACD,GAHD;;AAIA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AACE,UAAA,KAAK,EAAEZ,WADT;AAEE,UAAA,QAAQ,EAAES,YAFZ;AAGE,UAAA,SAAS,EAAC,cAHZ;AAG2B,UAAA,IAAI,EAAC,QAHhC;AAGyC,UAAA,WAAW,EAAC,QAHrD;AAG8D,wBAAW;AAHzE;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAQ,UAAA,SAAS,EAAC,wBAAlB;AAA2C,UAAA,IAAI,EAAC,QAAhD;AACE,UAAA,OAAO,EAAE,MAAMV,KAAK,CAACe,cAAN,CAAqBd,WAArB,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAA,0CAAY;AAAM,QAAA,KAAK,EAAC,aAAZ;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA9CD;;GAAMF,M;;KAAAA,M;AA+CN,eAAeA,MAAf","sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { useState } from \"react\";\n\nconst GET_TOPICS = gql`\nquery SearchTopics($search: String!) {\n  search(query: $search, type: REPOSITORY, first: 10) {\n    repositoryCount\n    edges {\n      node {\n        ... on Repository {\n          stargazers {\n            totalCount\n          }\n          resourcePath\n          repositoryTopics(first: 10) {\n            totalCount\n            nodes {\n              topic {\n                name\n                stargazerCount\n                relatedTopics {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst Topics = (props) => {\n  const [searchValue, setSearchValue] = useState(\"react\");\n\n  // const { loading, error, data } = useQuery(GET_TOPICS,\n  //   {\n  //     variables: { searchValue }\n  //   });\n\n  // if (loading) {\n  //   return (\n  //     <div>\n  //       <i className=\"fa fa-spinner fa-spin mr-4\" />\n  //       <span>...Searching for {searchValue}</span>\n  //     </div>\n  //   );\n  // }\n  // if (error) return `Error! ${error.message}`;\n  //debug the result if needed\n  // console.debug(\"RESULT:\", data);\n  const handleSearchChange = key => {\n    //update the search term when user type in the search bar\n    this.setState({ searchTerm: key });\n    console.log(\"handleSearchChange:\", key, this.state.searchTerm);\n  }\n\n  const handleChange = (e) => {\n    this.setState({ searchTerm: e.target.value });\n    console.debug(\"handleChange:\", this.state, e.target.value);\n  };\n  return (\n    <div>\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <div className=\"navbar-brand \">Test task GraphQL  </div>\n        <div className=\"form-inline\">\n          <input\n            value={searchValue}\n            onChange={handleChange}\n            className=\"form-control\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n          <button className=\"btn btn-outline-danger\" type=\"submit\"\n            onClick={() => props.onSearchChange(searchValue)}\n          >Search</button>\n        </div>\n      </nav>\n      <h1>Topic : <span class=\"text-danger\">{searchValue}</span></h1>\n    </div>\n  )\n}\nexport default Topics;"]},"metadata":{},"sourceType":"module"}