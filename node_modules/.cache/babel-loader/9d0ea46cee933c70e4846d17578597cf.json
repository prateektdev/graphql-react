{"ast":null,"code":"var _jsxFileName = \"/home/prateek/Documents/techvalens/test-task/src/components/TopicResult.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport Button from \"../StyledComponents/Button\";\nimport ListElement from \"../StyledComponents/ListElement\"; // for querying the topic from grahpql github api with search as a string parameter\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_TOPICS = gql`\nquery SearchTopics($search: String!) {\n  search(query: $search, type: REPOSITORY, first: 15) {\n    repositoryCount\n    edges {\n      node {\n        ... on Repository {\n          stargazers {\n            totalCount\n          }\n          resourcePath\n          repositoryTopics(first: 15) {\n            totalCount\n            nodes {\n              topic {\n                name\n                stargazerCount\n                relatedTopics {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nfunction TopicResult(props) {\n  _s();\n\n  //This is the related topics list component\n  let searchTerm = props.value;\n  const [newTopic, setTopic] = useState(searchTerm);\n  let search;\n\n  if (searchTerm === newTopic) {\n    //checking if current searchTerm and the clicked topic is same or not\n    search = searchTerm;\n  } else {\n    search = newTopic; //else calling the query for topics\n\n    searchTerm = newTopic;\n    props.onChange(search);\n  } //using the hook to query the topics\n\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TOPICS, {\n    variables: {\n      search\n    } //passing dynamic variable for searching\n\n  }); // show a loading spinner until the request is completed\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-spinner fa-spin mr-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"...Searching for \", search]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  } // if error is returned show this message\n\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Error! \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 21\n  }, this); // if no results are returned show this message\n\n  if (data.search.edges && data.search.edges.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"No Topics found for this\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 67\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: data && data.search.edges && data.search.edges.map((edge, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: /*#__PURE__*/_jsxDEV(ListElement, {\n        className: \"list-group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-start\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-primary mr-2\",\n            children: edge.node.resourcePath\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-star mr-2\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 22\n            }, this), edge.node.stargazers.totalCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-start\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Related Topics:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), edge.node.repositoryTopics.nodes.map((node, j) => /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setTopic(node.topic.name),\n            type: \"button\",\n            className: \"btn btn-outline-primary btn mx-2 my-2\",\n            children: [node.topic.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-dark\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-star m1-2\",\n                \"aria-hidden\": \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 47\n              }, this), node.topic.stargazerCount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)]\n          }, j, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TopicResult, \"EHmlzISZ8H15fnfjcDs5GfX1I5c=\", false, function () {\n  return [useQuery];\n});\n\n_c = TopicResult;\nexport default TopicResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopicResult\");","map":{"version":3,"sources":["/home/prateek/Documents/techvalens/test-task/src/components/TopicResult.js"],"names":["useQuery","gql","React","useState","Button","ListElement","GET_TOPICS","TopicResult","props","searchTerm","value","newTopic","setTopic","search","onChange","loading","error","data","variables","message","edges","length","map","edge","index","node","resourcePath","stargazers","totalCount","repositoryTopics","nodes","j","topic","name","stargazerCount"],"mappings":"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","sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport Button from \"../StyledComponents/Button\";\nimport ListElement from \"../StyledComponents/ListElement\";\n\n// for querying the topic from grahpql github api with search as a string parameter\nconst GET_TOPICS = gql`\nquery SearchTopics($search: String!) {\n  search(query: $search, type: REPOSITORY, first: 15) {\n    repositoryCount\n    edges {\n      node {\n        ... on Repository {\n          stargazers {\n            totalCount\n          }\n          resourcePath\n          repositoryTopics(first: 15) {\n            totalCount\n            nodes {\n              topic {\n                name\n                stargazerCount\n                relatedTopics {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\nfunction TopicResult(props) {\n//This is the related topics list component\n  let searchTerm = props.value;\n  const [newTopic, setTopic] = useState(searchTerm);\n\n  let search;\n\n  if (searchTerm === newTopic) {   //checking if current searchTerm and the clicked topic is same or not\n    search = searchTerm\n  } else {\n    search = newTopic             //else calling the query for topics\n    searchTerm = newTopic;\n    props.onChange(search);\n  }\n\n  //using the hook to query the topics\n  const { loading, error, data } = useQuery(GET_TOPICS,\n    {\n      variables: { search } //passing dynamic variable for searching\n    });\n\n  // show a loading spinner until the request is completed\n  if (loading) {\n    return (\n      <div>\n        <i className=\"fa fa-spinner fa-spin mr-4\" />\n        <span>...Searching for {search}</span>\n      </div>\n    );\n  }\n  // if error is returned show this message\n  if (error) return <div>\n    <span>Error! {error.message}</span>\n  </div>;\n\n  // if no results are returned show this message\n  if (data.search.edges && data.search.edges.length === 0) return <div>\n    <span>No Topics found for this</span>\n  </div>; \n\n  return (\n    <React.Fragment>\n      {/* iterating over the returned topics*/}\n      {data && data.search.edges && data.search.edges.map((edge, index) => (\n        <ul className=\"list-group\" key={index}>\n          <ListElement className=\"list-group-item\">\n            <div className=\"d-flex justify-content-start\">\n              <span className=\"text-primary mr-2\">{edge.node.resourcePath}</span>\n              <span> <i className=\"fa fa-star mr-2\" aria-hidden=\"true\" />{edge.node.stargazers.totalCount}</span>\n            </div>\n            <div className=\"d-flex justify-content-start\">\n              <h4>Related Topics:</h4>\n               {/* iterating over the sub related topics of each topic*/}\n              {edge.node.repositoryTopics.nodes.map((node, j) => (\n                <Button key={j}\n                  onClick={() => setTopic(node.topic.name)}\n                  type=\"button\" className=\"btn btn-outline-primary btn mx-2 my-2\">{node.topic.name}\n                  <span className=\"text-dark\"><i className=\"fa fa-star m1-2\" aria-hidden=\"true\" />{node.topic.stargazerCount}</span></Button>\n              ))}\n            </div>\n          </ListElement>\n        </ul>\n      ))}\n    </React.Fragment>\n  );\n}\n\nexport default TopicResult;"]},"metadata":{},"sourceType":"module"}